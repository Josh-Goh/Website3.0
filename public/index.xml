<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Josh Goh</title>
    <link>/</link>
    <description>Recent content on Josh Goh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 02 Oct 2016 22:55:05 -0400</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How REGEX can save your life!</title>
      <link>/blog/how-regex-can-save-your-life/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-regex-can-save-your-life/</guid>
      <description>How REGEX can save your life! You’re probably wondering what REGEX is. You’re probably also wondering why it can save your life. Let me explain:
Python Background In the modern digital world it’s impossible to escape technology. It looms over society and has woven its way into the fabric of our culture, because lets face it: we’re all addicted and no one is getting over it any time soon. So, in the meantime, lets learn to adapt by embracing the new digital world!</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>/projects/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/2015-07-23-r-rmarkdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/blog/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/blog/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Project 1: Exploratory Data Analysis</title>
      <link>/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project1/</guid>
      <description>Introduction:  Though healthcare is primarily considers the biological underpinnings of disease, recent developments have shifted the field of healthcare towards a more holistic approach, considering all facets of an individuals life that may affect their health. One such factor is economic status, often represented as household income. Therefore, in this exploratory data analysis, two datasets from the health inequality project will be joined and analyzed. The first dataset focuses on life expectancy and household income, with variables that include Gender, Household Income Percentile, Year, Count, Mean Household Income, Race-Adjusted Life Expectancy, Unadjusted Life Expectancy, Standard Error of Race-Adjusted Life Expectancy, and Standard Error of Unadjusted Life Expectancy.</description>
    </item>
    
    <item>
      <title>Project 2: Modeling, Testing, and Predicting</title>
      <link>/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project2/</guid>
      <description>Introduction:  One of the leading causes of morbidity and mortality in the world today, heart disease is an umbrella term that covers all different types of specific cardiovascular disease such as strokes, heart attacks, arrhythmia, angina, coronary artery disease, and so on. From the raw Cleveland Heart Disease dataset there have been 1,025 observations on patients since 1988 describing information regarding 14 prediction attributable variables. After cleaning the dataset, omitting NAs, and dropping variables that were not clearly elucidated, the dataset is left with 944 observations with 11 variables: age (range from 29-77 years of age), sex (Male or Female), resting blood pressure (range from 94-192 mmHg), serum cholesterol (range from 126-564 mg/dL), fasting blood sugar (above or below 120 mg/dL), resting electrocardiographic results (normal, ST-T wave abnormality, or left ventricular hypertrophy), maximum attainable heart rate (71-202 bpm), exercise induced angina (yes or no), ST peak slope (flat, upsloping, or downsloping), thalassemia status (normal, fixed defect, or reversible defect), and heart disease diagnosis (‘1’ = Disease or ‘0’ = No Disease).</description>
    </item>
    
  </channel>
</rss>